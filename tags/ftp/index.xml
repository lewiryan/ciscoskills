<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FTP on Cisco Skills</title>
    <link>https://ciscoskills.net/tags/ftp/</link>
    <description>Recent content in FTP on Cisco Skills</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Sep 2016 12:30:00 +0000</lastBuildDate><atom:link href="https://ciscoskills.net/tags/ftp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TFTP &amp; FTP Server on Centos 7</title>
      <link>https://ciscoskills.net/2016/09/tftp-ftp-server-on-centos-7/</link>
      <pubDate>Fri, 16 Sep 2016 12:30:00 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2016/09/tftp-ftp-server-on-centos-7/</guid>
      <description>
        
          &lt;p&gt;&lt;img src=&#34;https://systemstechblog.files.wordpress.com/2016/09/centos_logo.png&#34; alt=&#34;centos_logo&#34;&gt;If you ever needed a TFTP or an anonymous FTP server to transfer files, logs, or crash debugs to and from your network devices it can be a little tricky if you don&#39;t have anything setup. There are some free quick programs out there if you are in a pinch for one-time transfers but if you ever wanted to have something in infrastructure that is ready to go for this kind of stuff just follow this tutorial below. I&#39;m using the latest version of Centos 7 minimal, we need to add some house keeping items first so let&#39;s get started! Install NANO: [code light=&amp;quot;true&amp;quot;]yum install nano[/code] Install Firewalld (Seems like Centos 7 1511 does not include it at least the minimal version) [code light=&amp;quot;true&amp;quot;]yum install firewalld[/code] Enable firewalld to startup automatically when Centos boots up: [code light=&amp;quot;true&amp;quot;]systemctl enable firewalld[/code] Start the firewalld: [code light=&amp;quot;true&amp;quot;]systemctl start firewalld[/code] This first part of this tutorial will go over installing TFTP followed by installing the FTP. If you want to skip TFTP installation, i.e you only need FTP, select the link: &lt;a href=&#34;#Install-FTP-Server-Centos&#34;&gt;Install FTP Server on Centos&lt;/a&gt; Add the TFTP rule to the Centos Firewall and reload it: [code light=&amp;quot;true&amp;quot;]firewall-cmd --permanent --zone=public --add-service=tftp[/code] [code light=&amp;quot;true&amp;quot;]firewall-cmd --reload[/code] Install the TFTP server as well as the TFTP client just in case we want to test TFTP locally: [code light=&amp;quot;true&amp;quot;]yum install xinetd tftp-server tftp[/code] Enable the TFTP program to startup automatically: [code light=&amp;quot;true&amp;quot;]systemctl enable xinetd tftp[/code] Start the TFTP program now: [code light=&amp;quot;true&amp;quot;]systemctl start xinetd tftp[/code] Since we have started the TFTP service let&#39;s focus on the configuration file and settings for it.We don&#39;t want this TFTP service to run has root, so let&#39;s create a system account for TFTP. [code light=&amp;quot;true&amp;quot;]useradd -s /bin/false -r tftp[/code] This command basically creates a system account which cannot be used to access a shell a.k.a &amp;quot;login&amp;quot;. Depending on how this system was installed your path may be different if you are expecting to store a lot of files. In this tutorial I&#39;m going to be hosting these files under the /var folder. My full path is /var/FileServerRoot/TFTP The folder FileServerRoot is not created by default so I&#39;ll create the folder and put the correct permissions on this folder so that the TFTP system account can get access to it. Create the FileServerRoot Folder as well as a sub folder under it called TFTP: [code light=&amp;quot;true&amp;quot;]mkdir /var/FileServerRoot[/code] [code light=&amp;quot;true&amp;quot;]mkdir /var/FileServerRoot/TFTP[/code] Apply ownership for the TFTP system account: [code light=&amp;quot;true&amp;quot;]chown tftp:tftp /var/FileServerRoot/TFTP/[/code] Permissions should already be rwxr-xr-x for this directory. Next open up the configuration file for the TFTP server located at /etc/xinetd.d/tftp and following the example configuration file below: [code light=&amp;quot;true&amp;quot;]nano /etc/xinetd.d/tftp[/code] [code]# default: off # description: The tftp server serves files using the trivial file transfer \ # protocol. The tftp protocol is often used to boot diskless \ # workstations, download configuration files to network-aware printers, \ # and to start the installation process for some operating systems. service tftp { socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -c -s /var/FileServerRoot/TFTP -v -v -v -u tftp -p disable = no per_source = 11 cps = 100 2 flags = IPv4 } [/code] If you are curious of what each server argument means you can take a look &lt;a href=&#34;http://linux.die.net/man/8/tftpd&#34;&gt;here&lt;/a&gt; at the man page for TFTP server. Restart both services for the TFTP server: [code light=&amp;quot;true&amp;quot;]systemctl restart xinetd tftp[/code] So after that we have to run more command for SELinux to be happy and the best part is we DON&#39;T turn it off! Right now we are able to download files from the TFTP server but we get a permission denied when we try to upload files. To fix that run this command: [code light=&amp;quot;true&amp;quot;]chcon -t tftpdir_rw_t /var/FileServerRoot/TFTP[/code] We now have a functioning TFTP server, all files permissions in this folder should be no more than 664. Although it would work with full permissions TFTP isn&#39;t that secure to begin with, now onto installing the FTP server :).&lt;/p&gt;
&lt;h2 id=&#34;install-ftp-server-on-centos-7&#34;&gt;Install FTP Server on Centos 7&lt;/h2&gt;
&lt;p&gt;Alight let&#39;s install the FTP server on Centos and include the FTP client just in case we want to test locally: [code light=&amp;quot;true&amp;quot;]yum install vsftpd ftp[/code] Now let&#39;s start looking at the firewall settings, and configuration settings to make this FTP anonymous for both uploads and downloads. Add an FTP rule to firewall and reload it: [code light=&amp;quot;true&amp;quot;]firewall-cmd --permanent --zone=public --add-service=ftp[/code] [code light=&amp;quot;true&amp;quot;]firewall-cmd --reload[/code] Enable the vsftpd to startup apon boot: [code light=&amp;quot;true&amp;quot;]systemctl enable vsftpd[/code] Let&#39;s create the FTP folder and in this example its going to be under the FileServerRoot we created earlier with TFTP or if you skiped the TFTP installation just create a Root directory first followed by creating the FTP folder. [code light=&amp;quot;true&amp;quot;]mkdir /var/FileServerRoot/[/code] [code light=&amp;quot;true&amp;quot;]mkdir /var/FileServerRoot/FTP[/code] We have to change permissions on the FTP folder to the following: [code light=&amp;quot;true&amp;quot;]chmod 555 /var/FileServerRoot/FTP[/code] We are also going to make two more folders under the FTP folder called upload and download to keep things organized: [code light=&amp;quot;true&amp;quot;]mkdir /var/FileServerRoot/FTP/upload[/code] [code light=&amp;quot;true&amp;quot;]mkdir /var/FileServerRoot/FTP/download[/code] Change ownership of these folder to the FTP account which is built in: [code light=&amp;quot;true&amp;quot;]chown ftp:ftp /var/FileServerRoot/FTP/upload[/code] [code light=&amp;quot;true&amp;quot;]chown ftp:ftp /var/FileServerRoot/FTP/download[/code] Let&#39;s make a backup of the configuration file that runs FTP (Just in case) [code light=&amp;quot;true&amp;quot;]cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.orig[/code] Open up the configuration file with nano at /etc/vsftpq/vsftpd.conf and make the following edits towards the top of the file: [code]# Allow anonymous FTP? (Beware - allowed by default if you comment this out). anonymous_enable=YES # # Uncomment this to allow local users to log in. # When SELinux is enforcing check for SE bool ftp_home_dir local_enable=NO # # Uncomment this to enable any form of FTP write command. write_enable=YES # # Default umask for local users is 077. You may wish to change this to 022, # if your users expect that (022 is used by most other ftpd&#39;s) local_umask=022 # # Uncomment this to allow the anonymous FTP user to upload files. This only # has an effect if the above global write enable is activated. Also, you will # obviously need to create a directory writable by the FTP user. # When SELinux is enforcing check for SE bool allow_ftpd_anon_write, allow_ftpd_full_access anon_upload_enable=YES # [/code] At the end of file put the following: [code]# Point users at the Public directory anon_root=/var/FileServerRoot/FTP/ # # Stop prompting for a password on the command line. no_anon_password=YES # # Show the user and group as ftp:ftp, regardless of the owner. hide_ids=YES # # Limit the range of ports that can be used for passive FTP pasv_min_port=40000 pasv_max_port=50000[/code] We are almost done we have to make some changes to SELinux before we are good to go. We have to install Policy Core Utils: [code light=&amp;quot;true&amp;quot;]yum install policycoreutils-python[/code] We are now making changes to SELinux to allow anonymous downloads: [code light=&amp;quot;true&amp;quot;]semanage fcontext -a -t public_content_t &amp;quot;/var/FileServerRoot/FTP(/.*)?&amp;quot;[/code] Next command to run: [code light=&amp;quot;true&amp;quot;]restorecon -R -v /var/FileServerRoot/FTP[/code] - Output - [code]restorecon reset /var/FileServerRoot/FTP context unconfined_u:object_r:var_t:s0-&amp;gt;unconfined_u:object_r:public_content_t:s0 restorecon reset /var/FileServerRoot/FTP/upload context unconfined_u:object_r:var_t:s0-&amp;gt;unconfined_u:object_r:public_content_t:s0 restorecon reset /var/FileServerRoot/FTP/download context unconfined_u:object_r:var_t:s0-&amp;gt;unconfined_u:object_r:public_content_t:s0[/code] Now let&#39;s make changes to SELinux to allow anonymous uploads: [code light=&amp;quot;true&amp;quot;]semanage fcontext -a -t public_content_rw_t &amp;quot;/var/FileServerRoot/FTP/upload(/.*)?&amp;quot;[/code] Next command to run: [code light=&amp;quot;true&amp;quot;]restorecon -R -v /var/FileServerRoot/FTP/upload[/code] -Output - [code light=&amp;quot;true&amp;quot;]restorecon reset /var/FileServerRoot/FTP/upload context unconfined_u:object_r:public_content_t:s0-&amp;gt;unconfined_u:object_r:public_content_rw_t:s0[/code] One more command to run: [code light=&amp;quot;true&amp;quot;]semanage boolean -m --on allow_ftpd_anon_write[/code] That should be it! Let&#39;s restart the server to make sure everything comes back online including the TFTP part that we finished earlier. [code light=&amp;quot;true&amp;quot;]shutdown -r now[/code] If you have a TFTP and FTP client go ahead and test it out when the server reboots. If you run into some issues some troubleshooting tips are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check SELinux, if you are getting file permissions errors when uploading or downloading and permissions look this is likely SELinuix. It it can be a little picky which is why you&#39;ll read a lot of people just disable it. You can disable SELinux Temporarily (Turns back on when you reboot) to check if TFTP or FTP works by running:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code light=&amp;quot;true&amp;quot;]setenforce 0[/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are having problems with anonymous FTP, like downloading or uploading check security context by running:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code light=&amp;quot;true&amp;quot;]ls -Z[/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For FTP to work the context output should like something below:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code][root@localhost ~]# ls -Z /var/FileServerRoot/FTP/ drwxr-xr-x. ftp ftp unconfined_u:object_r:public_content_t:s0 download drwxr-xr-x. ftp ftp unconfined_u:object_r:public_content_rw_t:s0 upload [root@localhost ~]# [/code] Keep in mind we just created a system that is open to any TFTP and FTP connection. Reads and writes are anonymous so if there is a need to control what/who can access your server over your network/internet its recommended to in put ACLs in place to block unwanted connections. Otherwise you might be on list like &lt;a href=&#34;https://github.com/massivedynamic/openftp4&#34;&gt;this one&lt;/a&gt;, in which the entire IPv4 address space was scanned to find what responds anonymously on TCP port 21. That&#39;s all I got for now, as always I hope this information helpful!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Archive your Configuration</title>
      <link>https://ciscoskills.net/2013/01/archive-your-configuration/</link>
      <pubDate>Tue, 22 Jan 2013 05:30:42 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2013/01/archive-your-configuration/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://systemstechblog.files.wordpress.com/2013/01/hard20drive-black.png&#34;&gt;&lt;img src=&#34;http://systemstechblog.files.wordpress.com/2013/01/hard20drive-black.png&#34; alt=&#34;Hard-Drive&#34;&gt;&lt;/a&gt;It is important to save your &lt;a href=&#34;http://en.wikipedia.org/wiki/Router_%28computing%29&#34; title=&#34;Router (computing)&#34;&gt;router&lt;/a&gt; and switch configuration but what happens if the device fails or if you saved a configuration mistake, without having to manually worry about it? Well if your Cisco router or switch has &lt;a href=&#34;http://en.wikipedia.org/wiki/Cisco_IOS&#34; title=&#34;Cisco IOS&#34;&gt;Cisco IOS&lt;/a&gt; 12.3T and higher you would be able to set up an auto archive within the &lt;a href=&#34;http://en.wikipedia.org/wiki/Flash_memory&#34; title=&#34;Flash memory&#34;&gt;flash memory&lt;/a&gt; of the unit or you can send that configuration file to a server that does either &lt;a href=&#34;http://en.wikipedia.org/wiki/File_Transfer_Protocol&#34; title=&#34;File Transfer Protocol&#34;&gt;FTP&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34; title=&#34;Hypertext Transfer Protocol&#34;&gt;HTTP&lt;/a&gt;, SCP. &lt;a href=&#34;http://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol&#34; title=&#34;Trivial File Transfer Protocol&#34;&gt;TFTP&lt;/a&gt;, etc. Let&#39;s work through on setting up the archive feature on a Cisco Router. In this example we will look at one way to archive your configuration to the flash memory of the unit. This is good if you want the ability to revert back quickly to an existing configuration that has been saved in flash. Keep in mind this is not the only way to archive your configuration, instead of &lt;a href=&#34;http://en.wikipedia.org/wiki/Archive&#34; title=&#34;Archive&#34;&gt;archiving&lt;/a&gt; it to flash memory you could back it up on a server using some common transfer file protocol like FTP, TFTP and other options. Let&#39;s start setting up the archive feature so I&#39;m on the HQ Router and to archive to flash, the first thing we have to do is enter configuration mode followed by typing &lt;strong&gt;archive&lt;/strong&gt; and hit enter. [code]HQ#configure terminal Enter configuration commands, one per line. End with CNTL/Z. HQ(config)#archive HQ(config-archive)#[/code] You will notice we are in the archive configuration mode hit the question to see the available commands. [code]HQ(config-archive)#? Archive configuration commands: default Set a command to its defaults exit Exit from archive configuration mode log Logging commands maximum maximum number of backup copies no Negate a command or set its defaults path path for backups rollback Rollback parameters time-period Period of time in minutes to automatically archive the running-config write-memory Enable automatic backup generation during write memory[/code] For this we will put are configuration on the &lt;a href=&#34;http://en.wikipedia.org/wiki/Flash_file_system&#34; title=&#34;Flash file system&#34;&gt;flash file system&lt;/a&gt; let&#39;s keep it simple by just calling it &lt;strong&gt;HQ-RTR.config&lt;/strong&gt; here is our example: [code]HQ(config-archive)#path flash:HQ-RTR.config[/code] This writes the configuration into flash and by default writes up to ten and then rolls them over. This is also where you could point this path to an FTP/TFTP server instead of flash. To archive your configuration while under the &lt;strong&gt;config-archive&lt;/strong&gt; mode you have two choices, both of these options could be used together. The write-memory option will archive you configuration after you issue the &lt;strong&gt;copy running-config startup-config&lt;/strong&gt; command. The time-period command will write the configuration to flash every &lt;em&gt;X&lt;/em&gt; amount minutes. Where &lt;em&gt;X&lt;/em&gt; is the number of minutes you specify after the command. See an example of both commands below: [code]HQ(config-archive)#write-memory HQ(config-archive)#time-period 500000[/code] To see your archives you can issue the command show archive, in this example I have two archives located in flash. This command would also work if you are storing them on a FTP/TFTP server. [code]HQ#show archive There are currently 3 archive configurations saved. The next archive file will be named flash:HQ-RTR.config-3 Archive # Name 0 1 flash:HQ-RTR.config-1 2 flash:HQ-RTR.config-2 3 4 5 6 7 8 9 10 11 12 13 14[/code] You can also see these archives in the flash file system by issuing the &lt;strong&gt;show flash&lt;/strong&gt; command. [code]HQ#show flash: -#- --length-- -----date/time------ path 1 19939672 Sep 16 2008 15:51:54 +00:00 c1841-spservicesk9-mz.124-6.T7.bin 2 1122 Jan 22 2013 03:49:18 +00:00 HQ-RTR.config-1 3 1142 Jan 22 2013 03:54:28 +00:00 HQ-RTR.config-2 44060672 bytes available (19951616 bytes used)[/code] Let&#39;s roll back from an archive, to do this it is pretty simple just use the &lt;strong&gt;configure replace&lt;/strong&gt; command followed by &lt;strong&gt;archive&lt;/strong&gt; and the archive file you would like to replace the running-config. Let&#39;s look below and see the process as an example. [code]HQ#configure replace archive:flash:HQ-RTR.config-2 This will apply all necessary additions and deletions to replace the current running configuration with the contents of the specified configuration file, which is assumed to be a complete configuration, not a partial configuration. Enter Y if you are sure you want to proceed. ? [no]: Y HQ#[/code] That&#39;s it! You can either put these archives on the flash of the device or you can setup a simple FTP, TFTP, SCP, etc. box and have your configurations stored there. Like always I hope this information is helpful and post below if you have questions about this topic.You can also find more information on Cisco&#39;s website about the archiving along with the configure replace and rollback commands. &lt;a href=&#34;http://www.cisco.com/en/US/docs/ios/12_3t/12_3t7/feature/guide/gtrollbk.html#wp1066264&#34; title=&#34;Configuration Replace and Configuration Rollback&#34;&gt;Configuration Replace and Configuration Rollback&lt;/a&gt; Enjoy! :)&lt;/p&gt;
&lt;h6 id=&#34;related-articles&#34;&gt;Related articles&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ciscoskills.net/2012/12/01/configure-dhcp-on-a-cisco-router/&#34;&gt;Configure DHCP on a Cisco Router&lt;/a&gt; (ciscoskills.net)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rekrowten.wordpress.com/2012/12/26/how-to-remove-tracked-interface-from-hsrp/&#34;&gt;How to Remove Tracked Interface from HSRP&lt;/a&gt; (rekrowten.wordpress.com)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sucuri.net/2012/11/psa-sftpftp-password-exposure-via-sftp-config-json.html&#34;&gt;SFTP/FTP Password Exposure via sftp-config.json&lt;/a&gt; (sucuri.net)&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
