<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transmission Protocols on Cisco Skills</title>
    <link>https://ciscoskills.net/tags/transmission-protocols/</link>
    <description>Recent content in Transmission Protocols on Cisco Skills</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Mar 2011 16:15:29 +0000</lastBuildDate><atom:link href="https://ciscoskills.net/tags/transmission-protocols/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding UDP</title>
      <link>https://ciscoskills.net/2011/03/28/understanding-udp/</link>
      <pubDate>Mon, 28 Mar 2011 16:15:29 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2011/03/28/understanding-udp/</guid>
      <description>
        
          &lt;p&gt;Forever ago I talked about TCP (&lt;a href=&#34;http://ciscoskills.net/2011/02/25/understanding-tcp/&#34; title=&#34;Understanding TCP&#34;&gt;Understanding TCP&lt;/a&gt;) and I said that in that post that UDP would be another day, well this is the day where we get to understand UDP, which stands for &lt;a href=&#34;http://en.wikipedia.org/wiki/User_Datagram_Protocol&#34; title=&#34;User Datagram Protocol&#34;&gt;User Datagram Protocol&lt;/a&gt;. UDP is the total opposite of the TCP communication. UDP in short sends information or data without notifying the receiver that its sending data. UDP is considered a &lt;a href=&#34;http://en.wikipedia.org/wiki/Connectionless_protocol&#34; title=&#34;Connectionless protocol&#34;&gt;connectionless protocol&lt;/a&gt;, and does not guarantee the reliability or order the packets like TCP does. Therefor packets may be dropped and are never recovered.&lt;/p&gt;
&lt;!--adsense--&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2011/03/udp-communication.png&#34; alt=&#34;The UDP Communication Progress&#34;&gt;&lt;/p&gt;
&lt;p&gt;Although this may sound like a bad thing, it depends on your network application. Some common network applications that use UDP include: the Domain Name System (&lt;a href=&#34;http://en.wikipedia.org/wiki/Domain_Name_System&#34; title=&#34;Domain Name System&#34;&gt;DNS&lt;/a&gt;), streaming media applications such as &lt;a href=&#34;http://en.wikipedia.org/wiki/IPTV&#34; title=&#34;IPTV&#34;&gt;IPTV&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Voice_over_IP&#34; title=&#34;Voice over IP&#34;&gt;Voice over IP (VoIP)&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol&#34; title=&#34;Trivial File Transfer Protocol&#34;&gt;Trivial File Transfer Protocol&lt;/a&gt; (TFTP) and online games. Looking at the UDP header there is a lot less overhead when compared to TCP, this makes UDP faster for routers to route the information with less overhead on processing power.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2011/03/udp-header.png&#34; alt=&#34;The UDP Header Field&#34;&gt;&lt;/p&gt;
&lt;p&gt;Time-sensitive applications often use UDP because if dropped packets means less delayed information then UDP it is. In connectionless protocols there is no effort made to set up a connection like TCP, UDP just sends the information in one direction from the source address to the destination address and hopes it arrives in complete package but if not, the protocol does not care. So to review:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UDP is Unreliable - When a message is sent, it cannot or will not know if it will reach its destination; it could get lost along the way. There is no concept of acknowledgment, re-transmission and or timeout like the &lt;a href=&#34;http://en.wikipedia.org/wiki/Transmission_Control_Protocol&#34; title=&#34;Transmission Control Protocol&#34;&gt;TCP protocol&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;UDP is not ordered - If two messages are sent to the same destination, the order in which they arrive cannot be predicted.&lt;/li&gt;
&lt;li&gt;UDP is lightweight - There is no ordering of messages, any tracking connections, etc. It is a small transport layer designed on top of &lt;a href=&#34;http://en.wikipedia.org/wiki/Internet_Protocol&#34; title=&#34;Internet Protocol&#34;&gt;IP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Inside UDP &lt;a href=&#34;http://en.wikipedia.org/wiki/Datagram&#34; title=&#34;Datagram&#34;&gt;Datagrams&lt;/a&gt; - &lt;a href=&#34;http://en.wikipedia.org/wiki/Packet_%28information_technology%29&#34; title=&#34;Packet (information technology)&#34;&gt;Packets&lt;/a&gt; that are sent individually and are guaranteed to be whole if they arrive. Packets have definite bounds and do not split or merge into data streams. (Meaning that UDP packets are not coherent)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s UDP is in a summary format, I hope this information is useful and like always look at other sources like Cisco.com or do a simple web search. Comments are encourage, so let me know how I&#39;m  doing if you have a topic that is related to the ICND1 or ICND2 let me know about.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Understanding TCP</title>
      <link>https://ciscoskills.net/2011/02/25/understanding-tcp/</link>
      <pubDate>Fri, 25 Feb 2011 18:10:59 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2011/02/25/understanding-tcp/</guid>
      <description>
        
          &lt;p&gt;This tutorial is going to be talking about the &lt;a href=&#34;http://en.wikipedia.org/wiki/Transmission_Control_Protocol&#34; title=&#34;Transmission Control Protocol&#34;&gt;TCP protocol&lt;/a&gt;. Every time you connect to a website you are using the &lt;a href=&#34;http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34; title=&#34;Hypertext Transfer Protocol&#34;&gt;HTTP protocol&lt;/a&gt;, but below that you are also using a TCP protocol. The nature of TCP is to provide error recovery; there are other services or applications that use TCP. HTTP however is a common protocol that is used in online applications.  Remember TCP is not the only protocol in the &lt;a href=&#34;http://en.wikipedia.org/wiki/Transport_Layer&#34; title=&#34;Transport Layer&#34;&gt;transport layer&lt;/a&gt; of the &lt;a href=&#34;http://en.wikipedia.org/wiki/OSI_model&#34; title=&#34;OSI model&#34;&gt;OSI model&lt;/a&gt;, there is another called &lt;a href=&#34;http://en.wikipedia.org/wiki/User_Datagram_Protocol&#34; title=&#34;User Datagram Protocol&#34;&gt;UDP&lt;/a&gt; but that&#39;s another day. :)&lt;/p&gt;
&lt;!--adsense--&gt;
&lt;p&gt;TCP stands for (Transmission Control Protocol) what makes TCP shine is its &lt;a href=&#34;http://en.wikipedia.org/wiki/Error_detection_and_correction&#34; title=&#34;Error detection and correction&#34;&gt;error recovery&lt;/a&gt;, this helps other &lt;a href=&#34;http://en.wikipedia.org/wiki/Communications_protocol&#34; title=&#34;Communications protocol&#34;&gt;protocols&lt;/a&gt; below not worry about if the packet was dropped because TCP will request that packet again. With all of that overhead in TCP it does require more bandwidth, and processing compared to the UDP protocol. TCP has several fields in the header as pictured below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2011/02/tcpheader.jpg&#34; alt=&#34;The TCP Header Field&#34;&gt;&lt;/p&gt;
&lt;p&gt;Like mentioned TCP has reliability (error recovery) this is made possible by using sequence and acknowledgment numbers (&lt;a href=&#34;http://en.wikipedia.org/wiki/Byte&#34; title=&#34;Byte&#34;&gt;bytes&lt;/a&gt;) in the TCP header field. Take the example below the acknowledgment field in the TCP header that was sent by the web browser was 4000, this implies the next byte to be received will have a sequence number of 4000.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2011/02/tcp-sqack.png&#34; alt=&#34;TCP SEQ and ACK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since the sequence and acknowledgment numbers count the number of bytes, this helps with error control if a TCP segment was lost or caused an error the &lt;a href=&#34;http://en.wikipedia.org/wiki/Web_browser&#34; title=&#34;Web browser&#34;&gt;web browser&lt;/a&gt; would send an acknowledgment that the web server that would not be expecting and resend any lost data. An example would be if the web browser only received 2000 bytes, the client would send an acknowledgment of 3000 bytes. When the web server received that information it knows that it sent 3000 bytes of data and the acknowledgment field should be 4000. The web server would resend the third segment again and wait of an acknowledgment of 4000.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2011/02/tcp-drop.png&#34; alt=&#34;TCP Drop&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another feature TCP has is called flow control; this uses the window field which determines the maximum amount unacknowledged bytes at a given time. The size starts out small and if no errors occur then the window size increases the number of unacknowledged bytes. This speeds up time needed to download the information. If errors start to occur then the windows size decreases, keep in mind that this field will change often as it will continue try to raise the number of unacknowledged bytes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2011/02/tcp-window.png&#34; alt=&#34;TCP Window&#34;&gt;&lt;/p&gt;
&lt;p&gt;TCP is also does a connection establishment and termination. This happens before any data is sent is it will also start the sequence numbers, acknowledgment numbers and agree on the &lt;a href=&#34;http://en.wikipedia.org/wiki/Port_number&#34; title=&#34;Port number&#34;&gt;port numbers&lt;/a&gt; to use. This three-way handshake happens in beginning and at the end when the data transfer is complete. The flags it uses in the TCP header are &amp;quot;SYN&amp;quot; which means synchronize the sequence numbers. &amp;quot;ACK&amp;quot; which is an acknowledgment field and to terminate or finish the connection it will send a &amp;quot;FIN&amp;quot; bit. Although this a brief tutorial and how TCP works in gives you an understanding of the main components that are involved in setting up a TCP connection and finishing a connection. Like always I encourage you if you would like more information a web search will do, along with visiting Cisco.com. I hope this tutorial was helpful.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;static-comments&#34;&gt;Static Comments:&lt;/h3&gt;
&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://ciscoskills.net/2011/03/04/wordpress-com-hit-by-a-dos-attack/&#34; title=&#34;&#34;&gt;WordPress.com Hit by a DoS Attack | Cisco Skills&lt;/a&gt; - &lt;time datetime=&#34;2011-03-04 08:41:33&#34;&gt;Mar 5, 2011&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;[...] out my recent post of Understanding TCP to learn how the TCP protocol works in a simplified form. You can also find more information about [...]&lt;/p&gt;
&lt;hr /&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
