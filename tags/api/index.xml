<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on Cisco Skills</title>
    <link>https://ciscoskills.net/tags/api/</link>
    <description>Recent content in API on Cisco Skills</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Dec 2018 15:35:05 +0000</lastBuildDate><atom:link href="https://ciscoskills.net/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Barracuda Load Balancer- Powershell</title>
      <link>https://ciscoskills.net/2018/12/14/barracuda-load-balancer-powershell/</link>
      <pubDate>Fri, 14 Dec 2018 15:35:05 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2018/12/14/barracuda-load-balancer-powershell/</guid>
      <description>
        
          &lt;p&gt;Working on my Powershell skills, I was playing around with a Barracuda Load Balancer and noticed it supported some APIs which is kind of cool. At first I was playing around with it in postman and got to login and put some servers in maintenance mode, but then thought it would be really neat if I could get this working in Powershell, that way us humans can just run a script and even thinking in the &amp;quot;future&amp;quot; maybe have some automated process (a.k.a AI) handle this for us. ;) So in this post I&#39;ll talk about the script I created and some of the small challenges I had with this overall it was kind of neat putting this together. TLDR: Here is the script if you don&#39;t want to read:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PS1&#34; data-lang=&#34;PS1&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Barracuda Load Balancer Powershell Script&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Minimum version of Powershell is 6.0.4 – Can download stable releases @ https://github.com/PowerShell/PowerShell&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Puts servers in Maintenance, Disable or Enable status&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Put the URI API of the LB (example: &amp;#34;https://192.168.1.5/restapi/v2&amp;amp;quot;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$uri&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Put the group name, usually its &amp;#34;default&amp;#34; unless you have something different&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$groupname&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Put the service name you would like to modify, you can find this in the LB going to BASIC-&amp;gt;Services&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$servicename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Put the server you would like to modify, you can find the names of the servers under BASIC-&amp;gt;Services&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You can add additional servers to this list if you want to modify multiple servers at once, add additional variables&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$realserver1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$realserver2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# What status would you change the servers in the LB to? Valid values are enable, disable, or maintenance. Values are lower-case sensitive&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$status&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;enable&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Login into Barracuda you will get a prompt to login, currently only local accounts work for API. &lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$credential&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-Credential&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please type a username and password to login into the Barracuda LB&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$password&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$credential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetNetworkCredential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$username&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$credential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetNetworkCredential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# POST Request to Login into Barracuda&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$authUrl_Body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$password&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$username&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Convert this request into JSON and call it $jsonurlbody&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$jsonauth_Body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$authUrl_Body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertTo-Json&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Grab the token to and keep note of it, and use to login into Barracuda from now on&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$auth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;$uri/login&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$jsonauth_Body&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SkipCertificateCheck&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$authtoken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Barracuda only supports username only no password required when we have the token put this into a PSCredential to null the password&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$lbcred&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Management&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Automation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSCredential&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$authtoken&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;new-object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Security&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecureString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# POST Request to put a server into Maintenance, Enable, or Disable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$statusURL_Body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$status&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Convert this request into JSON and call it $jsonstatus_Body&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$jsonstatus_Body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$statusURL_Body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertTo-Json&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Put $realserver1 into $status &amp;#34;status&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;$uri/virtual_service_groups/$groupname/virtual_services/$servicename/servers/$realserver1&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Credential&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$lbcred&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Authentication&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Basic&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$jsonstatus_Body&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SkipCertificateCheck&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertTo-Json&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Put $realserver2 into $status &amp;#34;status&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;$uri/virtual_service_groups/$groupname/virtual_services/$servicename/servers/$realserver2&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Credential&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$lbcred&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Authentication&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Basic&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$jsonstatus_Body&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SkipCertificateCheck&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertTo-Json&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If you have additional servers copy the command above and replace it with a different variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing I was stuck on was the way Barracuda uses the API token, I was able to have to load balancer give me the token but Powershell also wanted a password with that API token. Barracuda only uses the username as the token to login. So I needed to configure Powershell to null the password when logging with the API token. A quick search on the web led me to create the $lbcred variable.&lt;/p&gt;
&lt;p&gt;Another small gotcha was when using the default version of Powershell on Windows 10 I was having a problem with the login and really didn&#39;t want to create a curl header or anything like that. I also wanted to keep the username and password out of the script. When you run the script it will ask you what the username and password is and use that while the script it running, I thought it would be easier. So when researching this, and I didn&#39;t actually know this but there are different updated versions of Powershell which are available on GitHub and they work different operating systems besides Windows. So that&#39;s pretty cool, and also tells you how much I pay attention to Powershell :).&lt;/p&gt;
&lt;p&gt;When looking at the release notes for Powershell 6.0.4 they made some modifications to the Invoke-RestMethod command for -Authentication switch so I downloaded Powrshell 6.0.4 and then found it does not work with Powershell ISE. :(&lt;/p&gt;
&lt;p&gt;Which is what I have been using and I now needed to download Visual Studio Code which is a free download and install  the Powershell extenstion so that I could run it within that program. Again just goes to show you how much I know about this stuff. After all of that I was able to login into the load balancer using the token API!&lt;/p&gt;
&lt;p&gt;The last command I just needed a json to tell the load balancer want I wanted to do with the servers, I could put them in maintenance, enable or disable status and if I had more than one server in the load balancer, I just copied the command again and used a different variable for each server. After that I was able to put servers in a different via Powershell!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;static-comments&#34;&gt;Static Comments:&lt;/h3&gt;
&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://ciscoskills.net/&#34;&gt;Ryan&lt;/a&gt; - &lt;time datetime=&#34;2019-02-15 21:49:07&#34;&gt;Feb 15, 2019&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;Jeremy, That token is usually only good for a limited time, its best to get a new one each time you run the script. Ryan&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Jeremy Edwards - &lt;time datetime=&#34;2019-02-15 08:42:49&#34;&gt;Feb 15, 2019&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;I also already generated a token, so that part isn&#39;t necessary for the script to generate if there is a way to incorporate the token into a field.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://ciscoskills.net/&#34;&gt;Ryan&lt;/a&gt; - &lt;time datetime=&#34;2019-02-15 21:45:26&#34;&gt;Feb 15, 2019&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;Jeremy, That error tells me that you are connecting over HTTP instead of HTTPS, I would use HTTPS when doing anything that involves passwords, and really anything nowadays. If you read the error message it tells you what you need to do if you want to use HTTP add the -AllowUnencryptedAuthentication to the Invoke-RestMethod. There a multiple ways to put the username and password in the script, a common way is to create a key file and a password file. A search engine is your friend :) The reason I did not use it in this script is I didn&#39;t have a good place to store to the the password or key file securely. By having the username and password prompt it also gives you time to cancel the script in case you run it by accident... Ryan&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Jeremy Edwards - &lt;time datetime=&#34;2019-02-15 08:28:55&#34;&gt;Feb 5, 2019&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;Ryan, I updated to PowerShell 6.1.2 and ran the script again. That did fix the username/password issue, but I&#39;m still getting an error. Also, how would we run this if we wanted the username and password to be kept in the script? My boss wants it fully automated with no user intervention. Invoke-RestMethod : The cmdlet cannot protect plain text secrets sent over unenc rypted connections. To suppress this warning and send plain text secrets over un encrypted networks, reissue the command specifying the AllowUnencryptedAuthentic ation parameter. At C:\curltest.ps1:38 char:1 + Invoke-RestMethod -Uri &amp;quot;$uri/virtual_service_groups/$groupname/virtua ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidArgument: (Microsoft.Power...stMethodCommand:In vokeRestMethodCommand) [Invoke-RestMethod], ValidationMetadataException + FullyQualifiedErrorId : WebCmdletAllowUnencryptedAuthenticationRequiredExcepti on,Microsoft.PowerShell.Commands.InvokeRestMethodCommand&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;https://ciscoskills.net/&#34;&gt;Ryan&lt;/a&gt; - &lt;time datetime=&#34;2019-02-11 19:13:49&#34;&gt;Feb 11, 2019&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;Hey Jeremy, For that Invoke-RestMethod to work with the -SkipCertificateCheck switch you need to at least have Powershell 6.0.0. &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-6&#34;&gt;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-restmethod?view=powershell-6&lt;/a&gt; For this script to work you need have Powershell 6.0.4 at least because of the -Authentication switch. Microsoft made some modifications to it and this script uses those modifications. So use Powershell 6.0.4 or above. Ryan&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Jeremy Edwards - &lt;time datetime=&#34;2019-02-11 12:53:42&#34;&gt;Feb 11, 2019&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;Congrats! This &lt;em&gt;almost&lt;/em&gt; works. Invoke-RestMethod : A parameter cannot be found that matches parameter name &#39;SkipCertificateCheck&#39;. At C:\curltest.ps1:27 char:111 + ... $jsonauth_Body -SkipCertificateCheck + ~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidArgument: (:) [Invoke-RestMethod], ParameterBindingException + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.InvokeRestMethodCommand Invoke-WebRequest : A parameter cannot be found that matches parameter name &#39;Authentication&#39;. At C:\curltest.ps1:38 char:123 + ... ential $lbcred -Authentication Basic -ContentType &amp;quot;application/json&amp;quot; -Method PUT ... + ~~~~~~~~~~~~~~~ + CategoryInfo : InvalidArgument: (:) [Invoke-WebRequest], ParameterBindingException + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.InvokeWebRequestCommand&lt;/p&gt;
&lt;hr /&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enable a RESTful ASA API</title>
      <link>https://ciscoskills.net/2018/10/08/enable-a-restful-asa-api/</link>
      <pubDate>Mon, 08 Oct 2018 13:00:21 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2018/10/08/enable-a-restful-asa-api/</guid>
      <description>
        
          &lt;p&gt;Starting from ASA 9.3(2) and onward the 5500-X hardware supports a RESTful API as an additional method for configuration/monitoring ASA hardware. Infrastructure as code as they call it, not anything new but I was reading a post that Ivan Pepelnjak wrote and as he &lt;a href=&#34;https://blog.ipspace.net/2018/09/infrastructure-as-code-netconf-and-rest.html&#34;&gt;points out&lt;/a&gt; there are two types of styles when we are dealing with IaC, the data model or CRUD. When reading information about the ASA RESTful API it was interesting what the ASA falls into, CRUD is the method it uses and although this method works, I have similar feeling to what Ivan posted, it wonders me if this is really a step forward into IaC. In this post we&#39;ll go through the steps to enable it and you can be the judge, does this RESTful API help?&lt;/p&gt;
&lt;!--adsense--&gt;
&lt;p&gt;So the first thing we need to grab the RESTful API application and by default is not included so we&#39;ll need to go to cisco.com and download it.  You need look for the Adaptive Security Appliance REST API Plugin and depending on your version of ASA there might be some gotchas on which versions to use so read the release notes. Once we you have the correct version downloaded you need to upload it to the ASA flash. Once uploaded you have to specify the location of the REST API Plugin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;ASA-HA-1(config)# rest-api image flash:asa-restapi-132325-lfbff-k8.SPA
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;Computed Hash   SHA2: 2106d6ac8c4e3c181c4820fb46588b8c
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;                      e104712e13fb783ad8f051e905c21330
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;                      0ad66d0e96a6f050805e1e7dc173f187
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;                      211c87db0c2d440da2e2d8614a210e4c
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;Embedded Hash   SHA2: 2106d6ac8c4e3c181c4820fb46588b8c
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                      e104712e13fb783ad8f051e905c21330
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;                      0ad66d0e96a6f050805e1e7dc173f187
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;                      211c87db0c2d440da2e2d8614a210e4c
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;Digital signature validated successfully
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;ASA-HA-1(config)#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that you can enable the REST API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;ASA-HA-1(config)# rest-api agent\[/code\]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once enabled if you have ASDM enabled then the HTTP service is running if not you have to enable the HTTP server as well as configure a management rule to tell what interface you will be connecting to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;http server enable
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;http 0.0.0.0 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that you can browse to the following link: https://ASAIP/doc/&lt;/p&gt;
&lt;p&gt;You will get prompt to login with a username and password, so make sure the authentication is configured on the ASA. If you have login successfully you will see a webpage like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ciscoskills.net/images/2018/10/asa-api.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;From here you can explore the different HTTP requests that are available and you essentially have another way of configuring and monitoring your ASA. So back my question does this type of RESTful API help you? I have explored this and have used Postman for my poor mans &amp;quot;IaC&amp;quot; but does that count, I feel something is missing? In the end it&#39;s still a process that runs and instead of running this via CLI its a CRUD API... - Ryan&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enable the NX-OS API</title>
      <link>https://ciscoskills.net/2017/10/18/enable-the-nx-os-api/</link>
      <pubDate>Wed, 18 Oct 2017 13:18:42 +0000</pubDate>
      
      <guid>https://ciscoskills.net/2017/10/18/enable-the-nx-os-api/</guid>
      <description>
        
          &lt;p&gt;So what has changed in the past 20 years? Take for example the network equipment that was manufactured in 1997, how did you configure that equipment? I would imagine it involved a serial port, HyperTerminal and trusty command line. Was API even a thing back in 1997, was it common to have an API interface in network equipment like today? Why do we even need an API on the equipment in the first place? What changed?  Well the year isn&#39;t 1997 anymore, that past us 20 years ago and the equipment we work with today looks and operates much differently than it did in 1997.&lt;/p&gt;
&lt;p&gt;We work in a world now that operates with Gbps/Tbps not Kbps/Mbps. With the need for speed CLI isn&#39;t the fastest thing anymore to configure or monitor network devices. This industry is moving into automated ways to configure and monitor network devices. So in this post we&#39;ll look at enabling the NX-API that&#39;s in the Cisco Nexus 9000 and 3000 family switches, and in foing this we&#39;ll get introduced into the Cisco NX-API sandbox.&lt;/p&gt;
&lt;p&gt;To enable this API  jump right into CLI and configure the management interface, we&#39;ll be able to use this API using the management IP address of the switch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;vrf context management
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;interface mgmt0
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;  description OOB Management
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;  vrf member management
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;  ip address 172.16.1.192/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the management interface is configured we now can enable the NX-API by one command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;nx-osv9000-1# config t
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;nx-osv9000-1(config)# feature nxapi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Open a web browser to the management IP address and login with a username and password.
&lt;img src=&#34;https://ciscoskills.net/images/2017/10/nx-api-login.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Welcome to NX-API Sandbox! With this we can play around to get a further understanding of how to use this API. Like being able to configure and or monitor this device with either a custom home-grown system, or the use some network automation software like Puppet or Chef.
&lt;img src=&#34;https://ciscoskills.net/images/2017/10/nx-api-sand.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;so-now-what&#34;&gt;So now what?&lt;/h3&gt;
&lt;p&gt;Well if you are like me and really don&#39;t have much programming experience or just enough to be dangerous this where you get comfortable and use this sandbox to understand what it can and cannot do. For example on the upper right hand side, if I select &lt;strong&gt;XML&lt;/strong&gt; on the message format, then &lt;strong&gt;cli_show&lt;/strong&gt; on the command type, followed by typing the command &lt;strong&gt;show hostname&lt;/strong&gt; in the CLI command box, and finishing by selecting the post button, I should see an output of an XML request as well as the XML response from the switch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;ins_api&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;cli_show&lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;sid&amp;gt;&lt;/span&gt;eoc&lt;span class=&#34;nt&#34;&gt;&amp;lt;/sid&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;outputs&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;output&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;hostname&amp;gt;&lt;/span&gt;nx-osv9000-1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/hostname&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;     &lt;span class=&#34;nt&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;input&amp;gt;&lt;/span&gt;show hostname&lt;span class=&#34;nt&#34;&gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;msg&amp;gt;&lt;/span&gt;Success&lt;span class=&#34;nt&#34;&gt;&amp;lt;/msg&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;200&lt;span class=&#34;nt&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/outputs&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ins_api&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sandbox is a loose term here as any configuration viewed or applied is live on the equipment, don&#39;t play in the sandbox on production equipment. :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This post just scratches the surface of what you could do with this API, being able to either write something yourself or using third-party software to help configure and maintain network equipment makes your job easier. Although we still have equipment and even people today that still like those three letters &amp;quot;CLI&amp;quot;, being able to use an API that can configure and maintain provides options for these devices, and who doesn&#39;t like that?&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
