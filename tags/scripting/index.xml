<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scripting on Cisco Skills</title>
    <link>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/tags/scripting/</link>
    <description>Recent content in scripting on Cisco Skills</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Jun 2015 12:15:00 +0000</lastBuildDate><atom:link href="http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PRTG Daily Email Powershell Script</title>
      <link>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/2015/06/prtg-daily-email-powershell-script/</link>
      <pubDate>Wed, 03 Jun 2015 12:15:00 +0000</pubDate>
      
      <guid>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/2015/06/prtg-daily-email-powershell-script/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;https://systemstechblog.files.wordpress.com/2015/06/combined_logo_500x300_rgb.png&#34;&gt;&lt;img src=&#34;https://systemstechblog.files.wordpress.com/2015/06/combined_logo_500x300_rgb.png?w=150&#34; alt=&#34;PRTG-Logo&#34;&gt;&lt;/a&gt;So I don&#39;t write much powershell but recently I needed a way to send daily emails out of PRTG. Thanks Paessler which has kept it simple with their PRTG monitoring system as the hardest part of this script was getting the data in HTML. (Remember I don&#39;t write much powershell. ;) ) If you have not used PRTG before check it out if you need some alerting in your environment. Personally this is one of my favorite systems for just monitoring because a lot of other monitoring systems include everything but the kitchen sink and reality we just need to know what&#39;s up and what&#39;s down. This script grabs an XML file that PRTG builds and saves it as &amp;quot;table.xml&amp;quot; I have the script check if there are any sensors in trouble if not send an email. If PRTG is reporting a sensor or sensors that are in trouble this scripts builds an HTML document with a table andÂ list the sensors in trouble highlighting the status column with the appropriate color and sends an email. Thanks goes to Martin Pugh who has provided the set-cellcolor function. :) [code language=&amp;quot;powershell&amp;quot;] # PRTG EMAIL ACTIVE ALARMS POWERSHELL SCRIPT. # USE TASK SCHEDULER TO RUN THIS SCRIPT. # Load up the function &amp;quot;Set-CellColor&amp;quot; thanks to Martin Pugh :) Function Set-CellColor { &amp;lt;# .SYNOPSIS Function that allows you to set individual cell colors in an HTML table .DESCRIPTION To be used inconjunction with ConvertTo-HTML this simple function allows you to set particular colors for cells in an HTML table. You provide the criteria the script uses to make the determination if a cell should be a particular color (property -gt 5, property -like &amp;quot;*Apple*&amp;quot;, etc). You can add the function to your scripts, dot source it to load into your current PowerShell session or add it to your $Profile so it is always available. To dot source: .&amp;quot;.\Set-CellColor.ps1&amp;quot; .PARAMETER Property Property, or column that you will be keying on. .PARAMETER Color Name or 6-digit hex value of the color you want the cell to be .PARAMETER InputObject HTML you want the script to process. This can be entered directly into the parameter or piped to the function. .PARAMETER Filter Specifies a query to determine if a cell should have its color changed. $true results will make the color change while $false result will return nothing. Syntax &lt;Property Name&gt; &lt;Operator&gt; &lt;Value&gt; &lt;Property Name&gt;::= the same as $Property. This must match exactly &lt;Operator&gt;::= &amp;quot;-eq&amp;quot; | &amp;quot;-le&amp;quot; | &amp;quot;-ge&amp;quot; | &amp;quot;-ne&amp;quot; | &amp;quot;-lt&amp;quot; | &amp;quot;-gt&amp;quot;| &amp;quot;-approx&amp;quot; | &amp;quot;-like&amp;quot; | &amp;quot;-notlike&amp;quot; &lt;JoinOperator&gt; ::= &amp;quot;-and&amp;quot; | &amp;quot;-or&amp;quot; &lt;NotOperator&gt; ::= &amp;quot;-not&amp;quot; The script first attempts to convert the cell to a number, and if it fails it will cast it as a string. So 40 will be a number and you can use -lt, -gt, etc. But 40% would be cast as a string so you could only use -eq, -ne, -like, etc. .PARAMETER Row Instructs the script to change the entire row to the specified color instead of the individual cell. .INPUTS HTML with table .OUTPUTS HTML .EXAMPLE get-process | convertto-html | set-cellcolor -Propety cpu -Color red -Filter &amp;quot;cpu -gt 1000&amp;quot; | out-file c:\test\get-process.html Assuming Set-CellColor has been dot sourced, run Get-Process and convert to HTML. Then change the CPU cell to red only if the CPU field is greater than 1000. .EXAMPLE get-process | convertto-html | set-cellcolor cpu red -filter &amp;quot;cpu -gt 1000 -and cpu -lt 2000&amp;quot; | out-file c:\test\get-process.html Same as Example 1, but now we will only turn a cell red if CPU is greater than 100 but less than 2000. .EXAMPLE $HTML = $Data | sort server | ConvertTo-html -head $header | Set-CellColor cookedvalue red -Filter &amp;quot;cookedvalue -gt 1&amp;quot; PS C:\&amp;gt; $HTML = $HTML | Set-CellColor Server green -Filter &amp;quot;server -eq &#39;dc2&#39;&amp;quot; PS C:\&amp;gt; $HTML | Set-CellColor Path Yellow -Filter &amp;quot;Path -like &amp;quot;&amp;quot;*memory*&amp;quot;&amp;quot;&amp;quot; | Out-File c:\Test\colortest.html Takes a collection of objects in $Data, sorts on the property Server and converts to HTML. From there we set the &amp;quot;CookedValue&amp;quot; property to red if it&#39;s greater then 1. We then send the HTML through Set-CellColor again, this time setting the Server cell to green if it&#39;s &amp;quot;dc2&amp;quot;. One more time through Set-CellColor turns the Path cell to Yellow if it contains the word &amp;quot;memory&amp;quot; in it. .EXAMPLE $HTML = $Data | sort server | ConvertTo-html -head $header | Set-CellColor cookedvalue red -Filter &amp;quot;cookedvalue -gt 1&amp;quot; -Row Now, if the cookedvalue property is greater than 1 the function will highlight the entire row red. .NOTES Author: Martin Pugh Twitter: @thesurlyadm1n Spiceworks: Martin9700 Blog: &lt;a href=&#34;http://www.thesurlyadmin.com&#34;&gt;www.thesurlyadmin.com&lt;/a&gt; Changelog: 1.5 Added ability to set row color with -Row switch instead of the individual cell 1.03 Added error message in case the $Property field cannot be found in the table header 1.02 Added some additional text to help. Added some error trapping around $Filter creation. 1.01 Added verbose output 1.0 Initial Release .LINK &lt;a href=&#34;http://community.spiceworks.com/scripts/show/2450-change-cell-color-in-html-table-with-powershell-set-cellcolor&#34;&gt;http://community.spiceworks.com/scripts/show/2450-change-cell-color-in-html-table-with-powershell-set-cellcolor&lt;/a&gt; #&amp;gt; [CmdletBinding()] Param ( [Parameter(Mandatory,Position=0)] [string]$Property, [Parameter(Mandatory,Position=1)] [string]$Color, [Parameter(Mandatory,ValueFromPipeline)] [Object[]]$InputObject, [Parameter(Mandatory)] [string]$Filter, [switch]$Row ) Begin { Write-Verbose &amp;quot;$(Get-Date): Function Set-CellColor begins&amp;quot; If ($Filter) { If ($Filter.ToUpper().IndexOf($Property.ToUpper()) -ge 0) { $Filter = $Filter.ToUpper().Replace($Property.ToUpper(),&amp;quot;`$Value&amp;quot;) Try { [scriptblock]$Filter = [scriptblock]::Create($Filter) } Catch { Write-Warning &amp;quot;$(Get-Date): &amp;quot;&amp;quot;$Filter&amp;quot;&amp;quot; caused an error, stopping script!&amp;quot; Write-Warning $Error[0] Exit } } Else { Write-Warning &amp;quot;Could not locate $Property in the Filter, which is required. Filter: $Filter&amp;quot; Exit } } } Process { ForEach ($Line in $InputObject) { If ($Line.IndexOf(&amp;quot;&lt;tr&gt;&amp;lt;th&amp;quot;) -ge 0) { Write-Verbose &amp;quot;$(Get-Date): Processing headers...&amp;quot; $Search = $Line | Select-String -Pattern &#39;&amp;lt;th ?[a-z\-:;&amp;quot;=]*&amp;gt;(.*?)&amp;lt;\/th&amp;gt;&#39; -AllMatches $Index = 0 ForEach ($Match in $Search.Matches) { If ($Match.Groups[1].Value -eq $Property) { Break } $Index ++ } If ($Index -eq $Search.Matches.Count) { Write-Warning &amp;quot;$(Get-Date): Unable to locate property: $Property in table header&amp;quot; Exit } Write-Verbose &amp;quot;$(Get-Date): $Property column found at index: $Index&amp;quot; } If ($Line -match &amp;quot;&amp;lt;tr( style=&amp;quot;&amp;quot;background-color:.+?&amp;quot;&amp;quot;)?&amp;gt;&amp;lt;td&amp;quot;) { $Search = $Line | Select-String -Pattern &#39;&amp;lt;td ?[a-z\-:;&amp;quot;=]*&amp;gt;(.*?)&amp;lt;\/td&amp;gt;&#39; -AllMatches $Value = $Search.Matches[$Index].Groups[1].Value -as [double] If (-not $Value) { $Value = $Search.Matches[$Index].Groups[1].Value } If (Invoke-Command $Filter) { If ($Row) { Write-Verbose &amp;quot;$(Get-Date): Criteria met! Changing row to $Color...&amp;quot; If ($Line -match &amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:(.+?)&amp;quot;&amp;quot;&amp;gt;&amp;quot;) { $Line = $Line -replace &amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:$($Matches[1])&amp;quot;,&amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:$Color&amp;quot; } Else { $Line = $Line.Replace(&amp;quot;&lt;tr&gt;&amp;quot;,&amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:$Color&amp;quot;&amp;quot;&amp;gt;&amp;quot;) } } Else { Write-Verbose &amp;quot;$(Get-Date): Criteria met! Changing cell to $Color...&amp;quot; $Line = $Line.Replace($Search.Matches[$Index].Value,&amp;quot;&amp;lt;td style=&amp;quot;&amp;quot;background-color:$Color&amp;quot;&amp;quot;&amp;gt;$Value&lt;/td&gt;&amp;quot;) } } } Write-Output $Line } } End { Write-Verbose &amp;quot;$(Get-Date): Function Set-CellColor completed&amp;quot; } } # Load up the variables, feel free to edit below like what is your email server? $smtp = &amp;quot;mailserver.example.com&amp;quot; # Who is this email going to? $to = &amp;quot;Mr. Joe &lt;a href=&#34;mailto:joe@example.com&#34;&gt;joe@example.com&lt;/a&gt;&amp;quot; # Carbon Copy anyone? $cc = &amp;quot;Mr. Admin &lt;a href=&#34;mailto:admin@example.com&#34;&gt;admin@example.com&lt;/a&gt;&amp;quot; $from = &amp;quot;PRTG Network Monitor &lt;a href=&#34;mailto:PRTG@example.com&#34;&gt;PRTG@example.com&lt;/a&gt;&amp;quot; $subject = &amp;quot;PRTG Checks&amp;quot; $time = Get-Date # Get a table ready in HTML just in case we have alerts in PRTG. $a = &amp;quot;&lt;style&gt;&amp;quot; $a = $a + &amp;quot;BODY{background-color:White;}&amp;quot; $a = $a + &amp;quot;TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}&amp;quot; $a = $a + &amp;quot;TH{Font-family: Courier; color: white; border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:black}&amp;quot; $a = $a + &amp;quot;TD{Font-family: Courier; border-width: 1px;padding: 3px;border-style: solid;border-color:}&amp;quot; $a = $a + &amp;quot;&lt;/style&gt;&amp;quot; # Write out something in HTML in case we have alerts in PRTG. $b = &amp;quot;&lt;H2&gt;PRTG Alerts&lt;/H2&gt;&amp;quot; $b = $b + &amp;quot;&lt;p&gt;Houston, we have a problem so please reference the chart below.&lt;/p&gt;&amp;quot; $b = $b + &amp;quot;&lt;p&gt;System Generated at $time.&lt;/p&gt;&amp;quot; # Write out something in HTML in case no alerts are active. $c = &amp;quot;&lt;H2&gt;PRTG Alerts &lt;/H2&gt;&amp;quot; $c = $c + &amp;quot;&lt;p&gt;No alerts being reported.&lt;/p&gt;&amp;quot; $c = $c + &amp;quot;&lt;p&gt;System Generated at $time.&lt;/p&gt;&amp;quot; # URL to your PRTG server you will need to reference a local user account and password that has access to PRTG. See the end of the URL. $url = &amp;quot;https://prtg.example.com/api/table.xml?content=sensors&amp;amp;columns=objid,downtimesince,device,sensor,lastvalue,status,message,priority&amp;amp;filter_status=5&amp;amp;filter_status=4&amp;amp;filter_status=10&amp;amp;filter_status=13&amp;amp;filter_status=14&amp;amp;sortby=priority&amp;amp;username=GOES_HERE&amp;amp;passhash=GOES_HERE&amp;quot; # Where do you want to store the XML file? $destination = &amp;quot;C:\PRTG-DAILY-EMAIL\table.xml&amp;quot; # What colors do you like for each alert? # You have a lot to choose from &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/aa358802.aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/aa358802.aspx&lt;/a&gt; $AckColor = &amp;quot;LightPink&amp;quot; $AckMsg = &amp;quot;Down (Acknowledged) &amp;quot; $DownColor = &amp;quot;Red&amp;quot; $DownMsg = &amp;quot;Down &amp;quot; $WarnColor = &amp;quot;Yellow&amp;quot; $WarnMsg = &amp;quot;Warning &amp;quot; $SimColor =&amp;quot;DarkSalmon&amp;quot; $SimMsg = &amp;quot;Down (simulated error)&amp;quot; $outfile =&amp;quot;C:\PRTG-DAILY-EMAIL\HTML.htm&amp;quot; # Let&#39;s run the powershell script Invoke-WebRequest $url -Outfile $destination $xml = [xml](Get-Content .\table.xml) # If nothing is alerting in PRTG we don&#39;t need to stay around. Let&#39;s say something about it and quit out. if ($xml.sensors.totalcount -eq 0) { ConvertTo-Html -Body $c | Out-File $outfile $emailbody = Get-Content $outfile | Out-String send-MailMessage -BodyAsHtml -SmtpServer $smtp -To $to -Cc $cc -From $from -Subject $subject -body $emailbody exit } $HTML = $xml.sensors.item | Sort-Object -Property device | select device,downtimesince,sensor,status,message_raw | ConvertTo-HTML -head $a -body $b $HTML = $HTML | Set-cellcolor status $WarnColor -Filter &amp;quot;status -eq &#39;$WarnMsg&#39;&amp;quot; $HTML = $HTML | Set-cellcolor status $DownColor -Filter &amp;quot;status -eq&#39;$DownMsg&#39;&amp;quot; $HTML = $HTML | Set-cellcolor status $AckColor -Filter &amp;quot;status -eq&#39;$AckMsg&#39;&amp;quot; $HTML = $HTML | Set-cellcolor status $SimColor -Filter &amp;quot;status -eq&#39;$SimMsg&#39;&amp;quot; $HTML | Out-File $outfile $emailbody = Get-Content $outfile | Out-String send-MailMessage -BodyAsHtml -SmtpServer $smtp -To $to -Cc $cc -From $from -Subject $subject -body $emailbody exit [/code] So in the end you should get an email that looks something below if something is wrong. That&#39;s all I got I hope this information is helpful feel free to edit this and use it! &lt;a href=&#34;https://systemstechblog.files.wordpress.com/2015/06/prtg-sample-alert1.png&#34;&gt;&lt;img src=&#34;https://systemstechblog.files.wordpress.com/2015/06/prtg-sample-alert1.png?w=660&#34; alt=&#34;PRTG Sample Alert&#34;&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Copy Running-Config From PowerShell</title>
      <link>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/2013/08/copy-running-config-from-powershell/</link>
      <pubDate>Fri, 16 Aug 2013 03:09:48 +0000</pubDate>
      
      <guid>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/2013/08/copy-running-config-from-powershell/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://systemstechblog.files.wordpress.com/2013/08/logo-powershell.png&#34;&gt;&lt;img src=&#34;http://systemstechblog.files.wordpress.com/2013/08/logo-powershell.png&#34; alt=&#34;powershell-logo&#34;&gt;&lt;/a&gt;I will be up front on this I really never had that much experience with power-shell scripts but I wanted a quick way to connect to routers and switches and issue the show run command and have that script output everything into one file. So some searching around I decided to drive into power-shell to see if I could get something to work. One of my first problems was to find a way to have power-shell &lt;a href=&#34;http://en.wikipedia.org/wiki/Secure_Shell&#34; title=&#34;Secure Shell&#34;&gt;SSH&lt;/a&gt; into my devices I found out about SharpSSH which look interesting but I also found SSH.NET. So I went with my second choice and decided to try the SSH.NET module. I would not of went to far if I did not stumble across this &lt;a href=&#34;http://www.powershelladmin.com/wiki/Main_Page&#34;&gt;website&lt;/a&gt; which helped out a lot. Here is the direct &lt;a href=&#34;http://www.powershelladmin.com/wiki/SSH_from_PowerShell_using_the_SSH.NET_library&#34;&gt;link&lt;/a&gt; of the Wiki page I was referring to. Also here is the code I quickly put together and I can bet there is a better way to setup this script but since I am pretty green when it comes to scripting this is what I could come up with. Feel free to edit and use, if you have suggestions on how to improve this script let me know by commenting below. [code language=&amp;quot;powershell&amp;quot;] #--------------------------------------------------------------------------- # PowerShell Script for Connecting using SSH to Network Devices and to # issue one or multiple commands. # RECOMMENDED USE: Automating Backups # ATTENTION: Module SSH-Sessions must be in the Default System32 # Location: Windows\system32\WindowsPowerShell\v1.0\Modules # MORE INFORMATION: &lt;a href=&#34;http://www.powershelladmin.com/wiki/SSH&#34;&gt;http://www.powershelladmin.com/wiki/SSH&lt;/a&gt;_from_PowerShell_using_the_SSH.NET_library #--------------------------------------------------------------------------- # Settings below should not need to be changed, however feel free to add-on! # Lets run by some house rules like asking what to do if an error occurs. $ErrorActionPreference =&amp;quot;Inquire&amp;quot; # Do you even have the SSH-Sessions Module? Letâs check before we continue. Import-Module SSH-Sessions # With the output file that is created by this script lets timestamp # the current Year, Month and Day and put it as part of the filename. $time =&amp;quot;$(get-date -f yyyy-MM-dd)&amp;quot; # Let&#39;s put in something in front of the date timestamp of the soon to be # created file defualt is &amp;quot;config&amp;quot; $filename =&amp;quot;config&amp;quot; # By default the type of file created is a text file. $ext =&amp;quot;.txt&amp;quot; #--------------------------------------------------------------------------- # START WITH CUSTOM CONFIGURATION # Where do you want the created file to be placed? The current user running # this script will need # access to that location. Also this script will not create folders if the # path does not exist expect an error # A good example to place the created files would be &amp;quot;C:\Cisco-Backups&amp;quot; $filepath =&amp;quot;&amp;quot; # Depending on the amount of devices you want to connect, this part of the # script could be lengthy. # To set this up follow the example. # $d1 =&amp;quot;192.168.1.1&amp;quot; # This is setting up a variable called &amp;quot;d1&amp;quot; followed by the IP address of # the device you would connect with SSH. # Each device will have a different variable if you have five devices it # would look like the following: # $d2 =&amp;quot;192.168.2.1&amp;quot; # $d3 =&amp;quot;192.168.3.1&amp;quot; # $d4 =&amp;quot;192.168.4.1&amp;quot; # $d5 =&amp;quot;192.168.5.1&amp;quot; # $d6 =&amp;quot;192.168.6.1&amp;quot; # Below is your custom list of devices that you want to connect with SSH. $d1 =&amp;quot;&amp;quot; # Depending on the environment each device may have a different account to # log in. # For simplicity&#39;s sake it is recommended to use one custom account for # all logins. # However you can specify different account logins per device. Follow the example. # $u1 =&amp;quot;admin&amp;quot; # $u2 =&amp;quot;bob&amp;quot; # This example shows two different username accounts it recommended to # match these up with the device you would be connecting to, # for example &amp;quot;d1&amp;quot; uses &amp;quot;u1&amp;quot;, etc. # Below is your custom list of login account names that each device # will use, if all devices use the same account just specify one variable. $u1 =&amp;quot;&amp;quot; # Depending on the environment each device may have a different password # to log in. For simplicity&#39;s sake it is recommended to use one password # for all logins. However you can specify different passwords per device. # Follow the example. # $p1 =&amp;quot;password123&amp;quot; # $p2 =&amp;quot;P@$$w0rd987&amp;quot; # This example shows two different passwords it recommended to match # these up with the device and username you would be connecting to, # for example &amp;quot;d1&amp;quot; uses &amp;quot;u1&amp;quot; which use &amp;quot;p1&amp;quot; etc. # Below is your custom list of passwords that each device will use, # if all devices use the same password just specify one variable. $p1 =&amp;quot;&amp;quot; # Depending on the amount of devices you want to connect, this part # of the script could be lengthy. The command to connect with SSH is # &amp;quot;New-SshSession&amp;quot; We have to specify the device to connect, the username # to use along with the password. Follow the example. # New-SshSession $d1 -Username $u1 -Password &amp;quot;$p1&amp;quot; # New-SshSession $d2 -Username $u2 -Password &amp;quot;$p2&amp;quot; # This example shows that we are going to be connecting with two devices, # with two different usernames and passwords. # If you are using the same username and password on all devices it would # follow this example which is using the same # variable for the username and password. # New-SshSession $d1 -Username $u1 -Password &amp;quot;$p1&amp;quot; # New-SshSession $d2 -Username $u1 -Password &amp;quot;$p1&amp;quot; # Below is your custom list that specifies the device to connect to, the # username and password. If all devices use the same username and password # just speifiy the same variable. New-SshSession $d1 -Username $u1 -Password &amp;quot;$p1&amp;quot; # DONE WITH CUSTOM CONFIGURATION #--------------------------------------------------------------------------- # What command to you want to run on all devices defualt is the &#39;show run&#39; # command. $c1 =&amp;quot;show run&amp;quot; # Lets run the command that we configured and output all of that into one # file. $Results = Invoke-Sshcommand -InvokeOnAll -Command &amp;quot;$c1&amp;quot; | Out-File &amp;quot;$filepath$filename-$time$ext&amp;quot; # We are done running commands on these devices lets close the connection. Remove-SshSession -RemoveAll # Close out of PowerShell exit [/code] I have tested this out and it works pretty good, I was able to test up to 12 devices at the same time. Since this script does not have any &amp;quot;if&amp;quot; statements and other smarts to it you do have to change a configuration option on your router or switch to go right into Privileged EXEC when the account logs in. This is done by usually saying privilege level 15 when setting up a user account on the router or switch. I hope this information is helpful and I will see if I can re-work this script as it is a work in progress with power-shell :) What are other ways to backup your configuration, what tools and or scripts have you used in the past?&lt;/p&gt;
&lt;h6 id=&#34;related-articles&#34;&gt;Related articles&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://reviews.cnet.com/8301-13727_7-57524257-263/ssh-tip-send-commands-remotely/?part=rss&amp;amp;subj=news&#34;&gt;SSH tip: Send commands remotely&lt;/a&gt; (reviews.cnet.com)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://community.spiceworks.com/topic/370296-what-actually-is-required-to-get-the-configuration-from-a-cisco-device&#34;&gt;What actually is required to get the configuration from a Cisco device?&lt;/a&gt; (community.spiceworks.com)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://myvirtualife.net/2013/08/07/how-to-enable-ssh-root-access-in-horizon-workspace-virtual-machines/&#34;&gt;How to enable SSH root access in Horizon Workspace Virtual Machines&lt;/a&gt; (myvirtualife.net)&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
