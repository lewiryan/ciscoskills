<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PRTG on Cisco Skills</title>
    <link>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/tags/prtg/</link>
    <description>Recent content in PRTG on Cisco Skills</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Jun 2015 12:15:00 +0000</lastBuildDate><atom:link href="http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/tags/prtg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PRTG Daily Email Powershell Script</title>
      <link>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/2015/06/prtg-daily-email-powershell-script/</link>
      <pubDate>Wed, 03 Jun 2015 12:15:00 +0000</pubDate>
      
      <guid>http://archive.ciscoskills.net.s3-website-us-west-2.amazonaws.com/2015/06/prtg-daily-email-powershell-script/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;https://systemstechblog.files.wordpress.com/2015/06/combined_logo_500x300_rgb.png&#34;&gt;&lt;img src=&#34;https://systemstechblog.files.wordpress.com/2015/06/combined_logo_500x300_rgb.png?w=150&#34; alt=&#34;PRTG-Logo&#34;&gt;&lt;/a&gt;So I don&#39;t write much powershell but recently I needed a way to send daily emails out of PRTG. Thanks Paessler which has kept it simple with their PRTG monitoring system as the hardest part of this script was getting the data in HTML. (Remember I don&#39;t write much powershell. ;) ) If you have not used PRTG before check it out if you need some alerting in your environment. Personally this is one of my favorite systems for just monitoring because a lot of other monitoring systems include everything but the kitchen sink and reality we just need to know what&#39;s up and what&#39;s down. This script grabs an XML file that PRTG builds and saves it as &amp;quot;table.xml&amp;quot; I have the script check if there are any sensors in trouble if not send an email. If PRTG is reporting a sensor or sensors that are in trouble this scripts builds an HTML document with a table andÂ list the sensors in trouble highlighting the status column with the appropriate color and sends an email. Thanks goes to Martin Pugh who has provided the set-cellcolor function. :) [code language=&amp;quot;powershell&amp;quot;] # PRTG EMAIL ACTIVE ALARMS POWERSHELL SCRIPT. # USE TASK SCHEDULER TO RUN THIS SCRIPT. # Load up the function &amp;quot;Set-CellColor&amp;quot; thanks to Martin Pugh :) Function Set-CellColor { &amp;lt;# .SYNOPSIS Function that allows you to set individual cell colors in an HTML table .DESCRIPTION To be used inconjunction with ConvertTo-HTML this simple function allows you to set particular colors for cells in an HTML table. You provide the criteria the script uses to make the determination if a cell should be a particular color (property -gt 5, property -like &amp;quot;*Apple*&amp;quot;, etc). You can add the function to your scripts, dot source it to load into your current PowerShell session or add it to your $Profile so it is always available. To dot source: .&amp;quot;.\Set-CellColor.ps1&amp;quot; .PARAMETER Property Property, or column that you will be keying on. .PARAMETER Color Name or 6-digit hex value of the color you want the cell to be .PARAMETER InputObject HTML you want the script to process. This can be entered directly into the parameter or piped to the function. .PARAMETER Filter Specifies a query to determine if a cell should have its color changed. $true results will make the color change while $false result will return nothing. Syntax &lt;Property Name&gt; &lt;Operator&gt; &lt;Value&gt; &lt;Property Name&gt;::= the same as $Property. This must match exactly &lt;Operator&gt;::= &amp;quot;-eq&amp;quot; | &amp;quot;-le&amp;quot; | &amp;quot;-ge&amp;quot; | &amp;quot;-ne&amp;quot; | &amp;quot;-lt&amp;quot; | &amp;quot;-gt&amp;quot;| &amp;quot;-approx&amp;quot; | &amp;quot;-like&amp;quot; | &amp;quot;-notlike&amp;quot; &lt;JoinOperator&gt; ::= &amp;quot;-and&amp;quot; | &amp;quot;-or&amp;quot; &lt;NotOperator&gt; ::= &amp;quot;-not&amp;quot; The script first attempts to convert the cell to a number, and if it fails it will cast it as a string. So 40 will be a number and you can use -lt, -gt, etc. But 40% would be cast as a string so you could only use -eq, -ne, -like, etc. .PARAMETER Row Instructs the script to change the entire row to the specified color instead of the individual cell. .INPUTS HTML with table .OUTPUTS HTML .EXAMPLE get-process | convertto-html | set-cellcolor -Propety cpu -Color red -Filter &amp;quot;cpu -gt 1000&amp;quot; | out-file c:\test\get-process.html Assuming Set-CellColor has been dot sourced, run Get-Process and convert to HTML. Then change the CPU cell to red only if the CPU field is greater than 1000. .EXAMPLE get-process | convertto-html | set-cellcolor cpu red -filter &amp;quot;cpu -gt 1000 -and cpu -lt 2000&amp;quot; | out-file c:\test\get-process.html Same as Example 1, but now we will only turn a cell red if CPU is greater than 100 but less than 2000. .EXAMPLE $HTML = $Data | sort server | ConvertTo-html -head $header | Set-CellColor cookedvalue red -Filter &amp;quot;cookedvalue -gt 1&amp;quot; PS C:\&amp;gt; $HTML = $HTML | Set-CellColor Server green -Filter &amp;quot;server -eq &#39;dc2&#39;&amp;quot; PS C:\&amp;gt; $HTML | Set-CellColor Path Yellow -Filter &amp;quot;Path -like &amp;quot;&amp;quot;*memory*&amp;quot;&amp;quot;&amp;quot; | Out-File c:\Test\colortest.html Takes a collection of objects in $Data, sorts on the property Server and converts to HTML. From there we set the &amp;quot;CookedValue&amp;quot; property to red if it&#39;s greater then 1. We then send the HTML through Set-CellColor again, this time setting the Server cell to green if it&#39;s &amp;quot;dc2&amp;quot;. One more time through Set-CellColor turns the Path cell to Yellow if it contains the word &amp;quot;memory&amp;quot; in it. .EXAMPLE $HTML = $Data | sort server | ConvertTo-html -head $header | Set-CellColor cookedvalue red -Filter &amp;quot;cookedvalue -gt 1&amp;quot; -Row Now, if the cookedvalue property is greater than 1 the function will highlight the entire row red. .NOTES Author: Martin Pugh Twitter: @thesurlyadm1n Spiceworks: Martin9700 Blog: &lt;a href=&#34;http://www.thesurlyadmin.com&#34;&gt;www.thesurlyadmin.com&lt;/a&gt; Changelog: 1.5 Added ability to set row color with -Row switch instead of the individual cell 1.03 Added error message in case the $Property field cannot be found in the table header 1.02 Added some additional text to help. Added some error trapping around $Filter creation. 1.01 Added verbose output 1.0 Initial Release .LINK &lt;a href=&#34;http://community.spiceworks.com/scripts/show/2450-change-cell-color-in-html-table-with-powershell-set-cellcolor&#34;&gt;http://community.spiceworks.com/scripts/show/2450-change-cell-color-in-html-table-with-powershell-set-cellcolor&lt;/a&gt; #&amp;gt; [CmdletBinding()] Param ( [Parameter(Mandatory,Position=0)] [string]$Property, [Parameter(Mandatory,Position=1)] [string]$Color, [Parameter(Mandatory,ValueFromPipeline)] [Object[]]$InputObject, [Parameter(Mandatory)] [string]$Filter, [switch]$Row ) Begin { Write-Verbose &amp;quot;$(Get-Date): Function Set-CellColor begins&amp;quot; If ($Filter) { If ($Filter.ToUpper().IndexOf($Property.ToUpper()) -ge 0) { $Filter = $Filter.ToUpper().Replace($Property.ToUpper(),&amp;quot;`$Value&amp;quot;) Try { [scriptblock]$Filter = [scriptblock]::Create($Filter) } Catch { Write-Warning &amp;quot;$(Get-Date): &amp;quot;&amp;quot;$Filter&amp;quot;&amp;quot; caused an error, stopping script!&amp;quot; Write-Warning $Error[0] Exit } } Else { Write-Warning &amp;quot;Could not locate $Property in the Filter, which is required. Filter: $Filter&amp;quot; Exit } } } Process { ForEach ($Line in $InputObject) { If ($Line.IndexOf(&amp;quot;&lt;tr&gt;&amp;lt;th&amp;quot;) -ge 0) { Write-Verbose &amp;quot;$(Get-Date): Processing headers...&amp;quot; $Search = $Line | Select-String -Pattern &#39;&amp;lt;th ?[a-z\-:;&amp;quot;=]*&amp;gt;(.*?)&amp;lt;\/th&amp;gt;&#39; -AllMatches $Index = 0 ForEach ($Match in $Search.Matches) { If ($Match.Groups[1].Value -eq $Property) { Break } $Index ++ } If ($Index -eq $Search.Matches.Count) { Write-Warning &amp;quot;$(Get-Date): Unable to locate property: $Property in table header&amp;quot; Exit } Write-Verbose &amp;quot;$(Get-Date): $Property column found at index: $Index&amp;quot; } If ($Line -match &amp;quot;&amp;lt;tr( style=&amp;quot;&amp;quot;background-color:.+?&amp;quot;&amp;quot;)?&amp;gt;&amp;lt;td&amp;quot;) { $Search = $Line | Select-String -Pattern &#39;&amp;lt;td ?[a-z\-:;&amp;quot;=]*&amp;gt;(.*?)&amp;lt;\/td&amp;gt;&#39; -AllMatches $Value = $Search.Matches[$Index].Groups[1].Value -as [double] If (-not $Value) { $Value = $Search.Matches[$Index].Groups[1].Value } If (Invoke-Command $Filter) { If ($Row) { Write-Verbose &amp;quot;$(Get-Date): Criteria met! Changing row to $Color...&amp;quot; If ($Line -match &amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:(.+?)&amp;quot;&amp;quot;&amp;gt;&amp;quot;) { $Line = $Line -replace &amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:$($Matches[1])&amp;quot;,&amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:$Color&amp;quot; } Else { $Line = $Line.Replace(&amp;quot;&lt;tr&gt;&amp;quot;,&amp;quot;&amp;lt;tr style=&amp;quot;&amp;quot;background-color:$Color&amp;quot;&amp;quot;&amp;gt;&amp;quot;) } } Else { Write-Verbose &amp;quot;$(Get-Date): Criteria met! Changing cell to $Color...&amp;quot; $Line = $Line.Replace($Search.Matches[$Index].Value,&amp;quot;&amp;lt;td style=&amp;quot;&amp;quot;background-color:$Color&amp;quot;&amp;quot;&amp;gt;$Value&lt;/td&gt;&amp;quot;) } } } Write-Output $Line } } End { Write-Verbose &amp;quot;$(Get-Date): Function Set-CellColor completed&amp;quot; } } # Load up the variables, feel free to edit below like what is your email server? $smtp = &amp;quot;mailserver.example.com&amp;quot; # Who is this email going to? $to = &amp;quot;Mr. Joe &lt;a href=&#34;mailto:joe@example.com&#34;&gt;joe@example.com&lt;/a&gt;&amp;quot; # Carbon Copy anyone? $cc = &amp;quot;Mr. Admin &lt;a href=&#34;mailto:admin@example.com&#34;&gt;admin@example.com&lt;/a&gt;&amp;quot; $from = &amp;quot;PRTG Network Monitor &lt;a href=&#34;mailto:PRTG@example.com&#34;&gt;PRTG@example.com&lt;/a&gt;&amp;quot; $subject = &amp;quot;PRTG Checks&amp;quot; $time = Get-Date # Get a table ready in HTML just in case we have alerts in PRTG. $a = &amp;quot;&lt;style&gt;&amp;quot; $a = $a + &amp;quot;BODY{background-color:White;}&amp;quot; $a = $a + &amp;quot;TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}&amp;quot; $a = $a + &amp;quot;TH{Font-family: Courier; color: white; border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:black}&amp;quot; $a = $a + &amp;quot;TD{Font-family: Courier; border-width: 1px;padding: 3px;border-style: solid;border-color:}&amp;quot; $a = $a + &amp;quot;&lt;/style&gt;&amp;quot; # Write out something in HTML in case we have alerts in PRTG. $b = &amp;quot;&lt;H2&gt;PRTG Alerts&lt;/H2&gt;&amp;quot; $b = $b + &amp;quot;&lt;p&gt;Houston, we have a problem so please reference the chart below.&lt;/p&gt;&amp;quot; $b = $b + &amp;quot;&lt;p&gt;System Generated at $time.&lt;/p&gt;&amp;quot; # Write out something in HTML in case no alerts are active. $c = &amp;quot;&lt;H2&gt;PRTG Alerts &lt;/H2&gt;&amp;quot; $c = $c + &amp;quot;&lt;p&gt;No alerts being reported.&lt;/p&gt;&amp;quot; $c = $c + &amp;quot;&lt;p&gt;System Generated at $time.&lt;/p&gt;&amp;quot; # URL to your PRTG server you will need to reference a local user account and password that has access to PRTG. See the end of the URL. $url = &amp;quot;https://prtg.example.com/api/table.xml?content=sensors&amp;amp;columns=objid,downtimesince,device,sensor,lastvalue,status,message,priority&amp;amp;filter_status=5&amp;amp;filter_status=4&amp;amp;filter_status=10&amp;amp;filter_status=13&amp;amp;filter_status=14&amp;amp;sortby=priority&amp;amp;username=GOES_HERE&amp;amp;passhash=GOES_HERE&amp;quot; # Where do you want to store the XML file? $destination = &amp;quot;C:\PRTG-DAILY-EMAIL\table.xml&amp;quot; # What colors do you like for each alert? # You have a lot to choose from &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/aa358802.aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/aa358802.aspx&lt;/a&gt; $AckColor = &amp;quot;LightPink&amp;quot; $AckMsg = &amp;quot;Down (Acknowledged) &amp;quot; $DownColor = &amp;quot;Red&amp;quot; $DownMsg = &amp;quot;Down &amp;quot; $WarnColor = &amp;quot;Yellow&amp;quot; $WarnMsg = &amp;quot;Warning &amp;quot; $SimColor =&amp;quot;DarkSalmon&amp;quot; $SimMsg = &amp;quot;Down (simulated error)&amp;quot; $outfile =&amp;quot;C:\PRTG-DAILY-EMAIL\HTML.htm&amp;quot; # Let&#39;s run the powershell script Invoke-WebRequest $url -Outfile $destination $xml = [xml](Get-Content .\table.xml) # If nothing is alerting in PRTG we don&#39;t need to stay around. Let&#39;s say something about it and quit out. if ($xml.sensors.totalcount -eq 0) { ConvertTo-Html -Body $c | Out-File $outfile $emailbody = Get-Content $outfile | Out-String send-MailMessage -BodyAsHtml -SmtpServer $smtp -To $to -Cc $cc -From $from -Subject $subject -body $emailbody exit } $HTML = $xml.sensors.item | Sort-Object -Property device | select device,downtimesince,sensor,status,message_raw | ConvertTo-HTML -head $a -body $b $HTML = $HTML | Set-cellcolor status $WarnColor -Filter &amp;quot;status -eq &#39;$WarnMsg&#39;&amp;quot; $HTML = $HTML | Set-cellcolor status $DownColor -Filter &amp;quot;status -eq&#39;$DownMsg&#39;&amp;quot; $HTML = $HTML | Set-cellcolor status $AckColor -Filter &amp;quot;status -eq&#39;$AckMsg&#39;&amp;quot; $HTML = $HTML | Set-cellcolor status $SimColor -Filter &amp;quot;status -eq&#39;$SimMsg&#39;&amp;quot; $HTML | Out-File $outfile $emailbody = Get-Content $outfile | Out-String send-MailMessage -BodyAsHtml -SmtpServer $smtp -To $to -Cc $cc -From $from -Subject $subject -body $emailbody exit [/code] So in the end you should get an email that looks something below if something is wrong. That&#39;s all I got I hope this information is helpful feel free to edit this and use it! &lt;a href=&#34;https://systemstechblog.files.wordpress.com/2015/06/prtg-sample-alert1.png&#34;&gt;&lt;img src=&#34;https://systemstechblog.files.wordpress.com/2015/06/prtg-sample-alert1.png?w=660&#34; alt=&#34;PRTG Sample Alert&#34;&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
